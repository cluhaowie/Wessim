{"body":"### Introduction\r\n**Wessim** is a simulator for a targeted resequencing as generally known as exome sequencing. Wessim basically generates a set of *artificial* DNA fragments for next generation sequencing (NGS) read simulation. In the targeted resequencing, we constraint the genomic regions that are used to generated DNA fragments to be only a part of the entire genome; they are usually exons and/or a few introns and untranslated regions (UTRs).\r\n\r\n### Install Wessim\r\nDownload Wessim using the links in this page, or go to https://github.com/sak042/Wessim   \r\nTo run Wessim, Python 2.7 or later is required. To install Python, go to http://python.org/\r\n\r\n### Requirements\r\nThe following programs are required to run Wessim or to prepare input files:\r\n* **pysam** library: go to http://code.google.com/p/pysam/ to install pysam\r\n* **numpy** library: go to http://numpy.scipy.org/ to install numpy\r\n* **gfServer** and **gfClient**: In probe hybridization mode, Wessim runs more than 100,000 queries again the reference genome. This essentially requires a local blat server. gfServer and gfClient are pre-compiled programs for establishing private blat server on your computer. go to http://hgdownload.cse.ucsc.edu/admin/exe/ to download gfServer and gfClient (and set your local path to access the two programs anywhere). For more details about the tools, please refer to http://genome.ucsc.edu/FAQ/FAQblat.html#blat5\r\n* **faToTwoBit**: go to http://hgdownload.cse.ucsc.edu/admin/exe/ and download faToTwoBit. This is required to convert your FASTA file to .2bit \r\n* **samtools**: samtools is needed to index your sample genome FASTA file (samtools faidx).\r\n* **GemSim** error models: Wessim uses GemSim's empirical error models for NGS read generation. Go to GemSim's project page (http://sourceforge.net/projects/gemsim/) to download GemSim. You will find several model files (e.g. ill100v4_p.gzip) under 'models' directory. Save them and remember their location.\r\n \r\n### Preparing Input Files \r\nWessim requires two major inputs. One is the sample genome sequence, and the other is the target region information.\r\n* **Sample genome sequence**: This is a FASTA file (e.g. ref.fa). You will need to index the file and generate .2bit\r\n<pre><code>\r\n>samtools faidx ref.fa\r\n>faToTwoBit ref.fa ref.2bit\r\n</code></pre>\r\n* **Target region information**: Target regions can be specified by two different ways. \r\n    1. **Ideal targets**: In ideal target mode, you will provide a list of genomic coordinates in a BED  file (e.g. chr1   798833 799125). Ideal targets of major exome capture platforms are freely available from vendor's website. For Agilent's SureSelect platforms, go to https://earray.chem.agilent.com/suredesign/ . You must register at their site. After logging in, go to Find Designs and select Agilent Catalog at the menu tab. You will be able to download all information of currently available platforms including ideal target BED files and probe sequence text files.   For NimbleGen's SeqCap go to http://www.nimblegen.com/products/seqcap/index.html and find BED files under Design and Annotation Files. \r\n    2. **Probe sequences**: Probe sequences are available for SureSelect platforms in the SureDesign homepage (https://earray.chem.agilent.com/suredesign/) (see above). Usually those files are named \"[platform]_probe.txt\"\r\n\r\n### Running Wessim\r\nThe basic synopsis of Wessim1 is like below:\r\n<pre><code>\r\n# Run Wessim1 in ideal target mode\r\n>python Wessim1.py -R ref.fa -B target.bed -n 1000000 -l 100 -M model.gzip -z -o result -t 4\r\n</code></pre> \r\nThis will generate *result.fastq.gz* (single-end mode / gzip compressed) using 4 threads (CPU cores).\r\n\r\nFor Wessim2:\r\n<pre><code>\r\n# Generate a FASTA file of probe sequence\r\n>python Prep_Probe2Fa.py probe.txt (this generates probe.txt.fa)\r\n# Establish your local blat server\r\n>gfServer start -canStop localhost 6666 ref.2bit\r\n# Run blat search to generate the match list\r\n>python Prep_BlatSearch.py ref.2bit probe.txt.fa probe.txt.fa.psl\r\n# Run Wessim2 in probe hybridization mode.\r\n>python Wessim2.py -R ref.fa -P probe.txt.fa -B probe_match.txt.fa.psl -n 1000000 -l 76 -M model.gzip -pz -o result\r\n</code></pre>\r\nThis will generate *result_1.fastq.gz* and *result_2.fastq.gz* (paired-end mode / gzip compressed).\r\n\r\n### Wessim Options\r\nYou can use '-h' for detailed help in command line.\r\n\r\n```\r\nMandatory input files (for Wessim1 and Wessim2 in common):\r\n  -R FILE     faidx-indexed (R)eference genome FASTA file\r\nFor Wessim1 only:\r\n  -B FILE     Target region .(B)ED file\r\nFor Wessim2 only:\r\n  -P FILE     (P)robe sequence FASTA file\r\n  -B FILE     (B)lat matched probe regions .PSL file\r\n\r\nParameters for exome capture:\r\n  -f INT      mean (f)ragment size. this corresponds to insert size when sequencing in paired-end mode. [200]\r\n  -d INT      standard (d)eviation of fragment size [50]\r\n  -m INT      (m)inimum fragment length [read_length + 20]\r\n  -x INT      slack margin of the given boundaries [0] (only for Wessim1)\r\n\r\nParameters for sequencing:\r\n  -p          generate paired-end reads [single]\r\n  -n INT      total (n)umber of reads\r\n  -l INT      read (l)ength (bp)\r\n  -M FILE     GemSim (M)odel file (.gzip)\r\n  -t INT      number of (t)hreaded subprocesses [1]\r\n\r\nOutput options:\r\n  -o FILE     (o)utput file header. \".fastq.gz\" or \".fastq\" will be attached automatically. Output will be splitted into two files in paired-end mode\r\n  -z          compress output with g(z)ip [false]\r\n  -q INT      (q)uality score offset [33]\r\n  -v          (v)erbose; print out intermediate messages.\r\n```\r\n\r\n### Support or Contact\r\nFor GitHub use, check out the documentation at http://help.github.com/pages or contact support@github.com and weâ€™ll help you sort it out.","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Wessim: Whole Exome Sequencing SIMulator using in silico exome capture","name":"Wessim","google":""}